///
//  Generated code. Do not modify.
///
// ignore_for_file: non_constant_identifier_names,library_prefixes

// ignore: UNUSED_SHOWN_NAME
import 'dart:core' show int, bool, double, String, List, override;

import 'package:protobuf/protobuf.dart';

import 'package_vulnerability.pbenum.dart';

export 'package_vulnerability.pbenum.dart';

class VulnerabilityType_Version extends GeneratedMessage {
  static final BuilderInfo _i = new BuilderInfo('VulnerabilityType_Version')
    ..a<int>(1, 'epoch', PbFieldType.O3)
    ..aOS(2, 'name')
    ..aOS(3, 'revision')
    ..e<VulnerabilityType_Version_VersionKind>(5, 'kind', PbFieldType.OE, VulnerabilityType_Version_VersionKind.NORMAL, VulnerabilityType_Version_VersionKind.valueOf, VulnerabilityType_Version_VersionKind.values)
    ..hasRequiredFields = false
  ;

  VulnerabilityType_Version() : super();
  VulnerabilityType_Version.fromBuffer(List<int> i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromBuffer(i, r);
  VulnerabilityType_Version.fromJson(String i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromJson(i, r);
  VulnerabilityType_Version clone() => new VulnerabilityType_Version()..mergeFromMessage(this);
  BuilderInfo get info_ => _i;
  static VulnerabilityType_Version create() => new VulnerabilityType_Version();
  static PbList<VulnerabilityType_Version> createRepeated() => new PbList<VulnerabilityType_Version>();
  static VulnerabilityType_Version getDefault() {
    if (_defaultInstance == null) _defaultInstance = new _ReadonlyVulnerabilityType_Version();
    return _defaultInstance;
  }
  static VulnerabilityType_Version _defaultInstance;
  static void $checkItem(VulnerabilityType_Version v) {
    if (v is! VulnerabilityType_Version) checkItemFailed(v, 'VulnerabilityType_Version');
  }

  int get epoch => $_get(0, 0);
  set epoch(int v) { $_setSignedInt32(0, v); }
  bool hasEpoch() => $_has(0);
  void clearEpoch() => clearField(1);

  String get name => $_getS(1, '');
  set name(String v) { $_setString(1, v); }
  bool hasName() => $_has(1);
  void clearName() => clearField(2);

  String get revision => $_getS(2, '');
  set revision(String v) { $_setString(2, v); }
  bool hasRevision() => $_has(2);
  void clearRevision() => clearField(3);

  VulnerabilityType_Version_VersionKind get kind => $_getN(3);
  set kind(VulnerabilityType_Version_VersionKind v) { setField(5, v); }
  bool hasKind() => $_has(3);
  void clearKind() => clearField(5);
}

class _ReadonlyVulnerabilityType_Version extends VulnerabilityType_Version with ReadonlyMessageMixin {}

class VulnerabilityType_Detail extends GeneratedMessage {
  static final BuilderInfo _i = new BuilderInfo('VulnerabilityType_Detail')
    ..aOS(1, 'cpeUri')
    ..aOS(4, 'severityName')
    ..a<VulnerabilityType_VulnerabilityLocation>(5, 'fixedLocation', PbFieldType.OM, VulnerabilityType_VulnerabilityLocation.getDefault, VulnerabilityType_VulnerabilityLocation.create)
    ..a<VulnerabilityType_Version>(6, 'minAffectedVersion', PbFieldType.OM, VulnerabilityType_Version.getDefault, VulnerabilityType_Version.create)
    ..a<VulnerabilityType_Version>(7, 'maxAffectedVersion', PbFieldType.OM, VulnerabilityType_Version.getDefault, VulnerabilityType_Version.create)
    ..aOS(8, 'package')
    ..aOS(9, 'description')
    ..aOS(10, 'packageType')
    ..aOB(11, 'isObsolete')
    ..hasRequiredFields = false
  ;

  VulnerabilityType_Detail() : super();
  VulnerabilityType_Detail.fromBuffer(List<int> i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromBuffer(i, r);
  VulnerabilityType_Detail.fromJson(String i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromJson(i, r);
  VulnerabilityType_Detail clone() => new VulnerabilityType_Detail()..mergeFromMessage(this);
  BuilderInfo get info_ => _i;
  static VulnerabilityType_Detail create() => new VulnerabilityType_Detail();
  static PbList<VulnerabilityType_Detail> createRepeated() => new PbList<VulnerabilityType_Detail>();
  static VulnerabilityType_Detail getDefault() {
    if (_defaultInstance == null) _defaultInstance = new _ReadonlyVulnerabilityType_Detail();
    return _defaultInstance;
  }
  static VulnerabilityType_Detail _defaultInstance;
  static void $checkItem(VulnerabilityType_Detail v) {
    if (v is! VulnerabilityType_Detail) checkItemFailed(v, 'VulnerabilityType_Detail');
  }

  String get cpeUri => $_getS(0, '');
  set cpeUri(String v) { $_setString(0, v); }
  bool hasCpeUri() => $_has(0);
  void clearCpeUri() => clearField(1);

  String get severityName => $_getS(1, '');
  set severityName(String v) { $_setString(1, v); }
  bool hasSeverityName() => $_has(1);
  void clearSeverityName() => clearField(4);

  VulnerabilityType_VulnerabilityLocation get fixedLocation => $_getN(2);
  set fixedLocation(VulnerabilityType_VulnerabilityLocation v) { setField(5, v); }
  bool hasFixedLocation() => $_has(2);
  void clearFixedLocation() => clearField(5);

  VulnerabilityType_Version get minAffectedVersion => $_getN(3);
  set minAffectedVersion(VulnerabilityType_Version v) { setField(6, v); }
  bool hasMinAffectedVersion() => $_has(3);
  void clearMinAffectedVersion() => clearField(6);

  VulnerabilityType_Version get maxAffectedVersion => $_getN(4);
  set maxAffectedVersion(VulnerabilityType_Version v) { setField(7, v); }
  bool hasMaxAffectedVersion() => $_has(4);
  void clearMaxAffectedVersion() => clearField(7);

  String get package => $_getS(5, '');
  set package(String v) { $_setString(5, v); }
  bool hasPackage() => $_has(5);
  void clearPackage() => clearField(8);

  String get description => $_getS(6, '');
  set description(String v) { $_setString(6, v); }
  bool hasDescription() => $_has(6);
  void clearDescription() => clearField(9);

  String get packageType => $_getS(7, '');
  set packageType(String v) { $_setString(7, v); }
  bool hasPackageType() => $_has(7);
  void clearPackageType() => clearField(10);

  bool get isObsolete => $_get(8, false);
  set isObsolete(bool v) { $_setBool(8, v); }
  bool hasIsObsolete() => $_has(8);
  void clearIsObsolete() => clearField(11);
}

class _ReadonlyVulnerabilityType_Detail extends VulnerabilityType_Detail with ReadonlyMessageMixin {}

class VulnerabilityType_VulnerabilityDetails extends GeneratedMessage {
  static final BuilderInfo _i = new BuilderInfo('VulnerabilityType_VulnerabilityDetails')
    ..aOS(3, 'type')
    ..e<VulnerabilityType_Severity>(4, 'severity', PbFieldType.OE, VulnerabilityType_Severity.SEVERITY_UNSPECIFIED, VulnerabilityType_Severity.valueOf, VulnerabilityType_Severity.values)
    ..a<double>(5, 'cvssScore', PbFieldType.OF)
    ..pp<VulnerabilityType_PackageIssue>(6, 'packageIssue', PbFieldType.PM, VulnerabilityType_PackageIssue.$checkItem, VulnerabilityType_PackageIssue.create)
    ..hasRequiredFields = false
  ;

  VulnerabilityType_VulnerabilityDetails() : super();
  VulnerabilityType_VulnerabilityDetails.fromBuffer(List<int> i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromBuffer(i, r);
  VulnerabilityType_VulnerabilityDetails.fromJson(String i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromJson(i, r);
  VulnerabilityType_VulnerabilityDetails clone() => new VulnerabilityType_VulnerabilityDetails()..mergeFromMessage(this);
  BuilderInfo get info_ => _i;
  static VulnerabilityType_VulnerabilityDetails create() => new VulnerabilityType_VulnerabilityDetails();
  static PbList<VulnerabilityType_VulnerabilityDetails> createRepeated() => new PbList<VulnerabilityType_VulnerabilityDetails>();
  static VulnerabilityType_VulnerabilityDetails getDefault() {
    if (_defaultInstance == null) _defaultInstance = new _ReadonlyVulnerabilityType_VulnerabilityDetails();
    return _defaultInstance;
  }
  static VulnerabilityType_VulnerabilityDetails _defaultInstance;
  static void $checkItem(VulnerabilityType_VulnerabilityDetails v) {
    if (v is! VulnerabilityType_VulnerabilityDetails) checkItemFailed(v, 'VulnerabilityType_VulnerabilityDetails');
  }

  String get type => $_getS(0, '');
  set type(String v) { $_setString(0, v); }
  bool hasType() => $_has(0);
  void clearType() => clearField(3);

  VulnerabilityType_Severity get severity => $_getN(1);
  set severity(VulnerabilityType_Severity v) { setField(4, v); }
  bool hasSeverity() => $_has(1);
  void clearSeverity() => clearField(4);

  double get cvssScore => $_getN(2);
  set cvssScore(double v) { $_setFloat(2, v); }
  bool hasCvssScore() => $_has(2);
  void clearCvssScore() => clearField(5);

  List<VulnerabilityType_PackageIssue> get packageIssue => $_getList(3);
}

class _ReadonlyVulnerabilityType_VulnerabilityDetails extends VulnerabilityType_VulnerabilityDetails with ReadonlyMessageMixin {}

class VulnerabilityType_PackageIssue extends GeneratedMessage {
  static final BuilderInfo _i = new BuilderInfo('VulnerabilityType_PackageIssue')
    ..a<VulnerabilityType_VulnerabilityLocation>(1, 'affectedLocation', PbFieldType.OM, VulnerabilityType_VulnerabilityLocation.getDefault, VulnerabilityType_VulnerabilityLocation.create)
    ..a<VulnerabilityType_VulnerabilityLocation>(2, 'fixedLocation', PbFieldType.OM, VulnerabilityType_VulnerabilityLocation.getDefault, VulnerabilityType_VulnerabilityLocation.create)
    ..aOS(3, 'severityName')
    ..hasRequiredFields = false
  ;

  VulnerabilityType_PackageIssue() : super();
  VulnerabilityType_PackageIssue.fromBuffer(List<int> i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromBuffer(i, r);
  VulnerabilityType_PackageIssue.fromJson(String i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromJson(i, r);
  VulnerabilityType_PackageIssue clone() => new VulnerabilityType_PackageIssue()..mergeFromMessage(this);
  BuilderInfo get info_ => _i;
  static VulnerabilityType_PackageIssue create() => new VulnerabilityType_PackageIssue();
  static PbList<VulnerabilityType_PackageIssue> createRepeated() => new PbList<VulnerabilityType_PackageIssue>();
  static VulnerabilityType_PackageIssue getDefault() {
    if (_defaultInstance == null) _defaultInstance = new _ReadonlyVulnerabilityType_PackageIssue();
    return _defaultInstance;
  }
  static VulnerabilityType_PackageIssue _defaultInstance;
  static void $checkItem(VulnerabilityType_PackageIssue v) {
    if (v is! VulnerabilityType_PackageIssue) checkItemFailed(v, 'VulnerabilityType_PackageIssue');
  }

  VulnerabilityType_VulnerabilityLocation get affectedLocation => $_getN(0);
  set affectedLocation(VulnerabilityType_VulnerabilityLocation v) { setField(1, v); }
  bool hasAffectedLocation() => $_has(0);
  void clearAffectedLocation() => clearField(1);

  VulnerabilityType_VulnerabilityLocation get fixedLocation => $_getN(1);
  set fixedLocation(VulnerabilityType_VulnerabilityLocation v) { setField(2, v); }
  bool hasFixedLocation() => $_has(1);
  void clearFixedLocation() => clearField(2);

  String get severityName => $_getS(2, '');
  set severityName(String v) { $_setString(2, v); }
  bool hasSeverityName() => $_has(2);
  void clearSeverityName() => clearField(3);
}

class _ReadonlyVulnerabilityType_PackageIssue extends VulnerabilityType_PackageIssue with ReadonlyMessageMixin {}

class VulnerabilityType_VulnerabilityLocation extends GeneratedMessage {
  static final BuilderInfo _i = new BuilderInfo('VulnerabilityType_VulnerabilityLocation')
    ..aOS(1, 'cpeUri')
    ..aOS(2, 'package')
    ..a<VulnerabilityType_Version>(4, 'version', PbFieldType.OM, VulnerabilityType_Version.getDefault, VulnerabilityType_Version.create)
    ..hasRequiredFields = false
  ;

  VulnerabilityType_VulnerabilityLocation() : super();
  VulnerabilityType_VulnerabilityLocation.fromBuffer(List<int> i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromBuffer(i, r);
  VulnerabilityType_VulnerabilityLocation.fromJson(String i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromJson(i, r);
  VulnerabilityType_VulnerabilityLocation clone() => new VulnerabilityType_VulnerabilityLocation()..mergeFromMessage(this);
  BuilderInfo get info_ => _i;
  static VulnerabilityType_VulnerabilityLocation create() => new VulnerabilityType_VulnerabilityLocation();
  static PbList<VulnerabilityType_VulnerabilityLocation> createRepeated() => new PbList<VulnerabilityType_VulnerabilityLocation>();
  static VulnerabilityType_VulnerabilityLocation getDefault() {
    if (_defaultInstance == null) _defaultInstance = new _ReadonlyVulnerabilityType_VulnerabilityLocation();
    return _defaultInstance;
  }
  static VulnerabilityType_VulnerabilityLocation _defaultInstance;
  static void $checkItem(VulnerabilityType_VulnerabilityLocation v) {
    if (v is! VulnerabilityType_VulnerabilityLocation) checkItemFailed(v, 'VulnerabilityType_VulnerabilityLocation');
  }

  String get cpeUri => $_getS(0, '');
  set cpeUri(String v) { $_setString(0, v); }
  bool hasCpeUri() => $_has(0);
  void clearCpeUri() => clearField(1);

  String get package => $_getS(1, '');
  set package(String v) { $_setString(1, v); }
  bool hasPackage() => $_has(1);
  void clearPackage() => clearField(2);

  VulnerabilityType_Version get version => $_getN(2);
  set version(VulnerabilityType_Version v) { setField(4, v); }
  bool hasVersion() => $_has(2);
  void clearVersion() => clearField(4);
}

class _ReadonlyVulnerabilityType_VulnerabilityLocation extends VulnerabilityType_VulnerabilityLocation with ReadonlyMessageMixin {}

class VulnerabilityType extends GeneratedMessage {
  static final BuilderInfo _i = new BuilderInfo('VulnerabilityType')
    ..a<double>(2, 'cvssScore', PbFieldType.OF)
    ..e<VulnerabilityType_Severity>(3, 'severity', PbFieldType.OE, VulnerabilityType_Severity.SEVERITY_UNSPECIFIED, VulnerabilityType_Severity.valueOf, VulnerabilityType_Severity.values)
    ..pp<VulnerabilityType_Detail>(4, 'details', PbFieldType.PM, VulnerabilityType_Detail.$checkItem, VulnerabilityType_Detail.create)
    ..hasRequiredFields = false
  ;

  VulnerabilityType() : super();
  VulnerabilityType.fromBuffer(List<int> i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromBuffer(i, r);
  VulnerabilityType.fromJson(String i, [ExtensionRegistry r = ExtensionRegistry.EMPTY]) : super.fromJson(i, r);
  VulnerabilityType clone() => new VulnerabilityType()..mergeFromMessage(this);
  BuilderInfo get info_ => _i;
  static VulnerabilityType create() => new VulnerabilityType();
  static PbList<VulnerabilityType> createRepeated() => new PbList<VulnerabilityType>();
  static VulnerabilityType getDefault() {
    if (_defaultInstance == null) _defaultInstance = new _ReadonlyVulnerabilityType();
    return _defaultInstance;
  }
  static VulnerabilityType _defaultInstance;
  static void $checkItem(VulnerabilityType v) {
    if (v is! VulnerabilityType) checkItemFailed(v, 'VulnerabilityType');
  }

  double get cvssScore => $_getN(0);
  set cvssScore(double v) { $_setFloat(0, v); }
  bool hasCvssScore() => $_has(0);
  void clearCvssScore() => clearField(2);

  VulnerabilityType_Severity get severity => $_getN(1);
  set severity(VulnerabilityType_Severity v) { setField(3, v); }
  bool hasSeverity() => $_has(1);
  void clearSeverity() => clearField(3);

  List<VulnerabilityType_Detail> get details => $_getList(2);
}

class _ReadonlyVulnerabilityType extends VulnerabilityType with ReadonlyMessageMixin {}

