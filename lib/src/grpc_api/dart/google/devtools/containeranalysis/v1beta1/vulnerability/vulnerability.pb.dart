///
//  Generated code. Do not modify.
//  source: google/devtools/containeranalysis/v1beta1/vulnerability/vulnerability.proto
///
// ignore_for_file: camel_case_types,non_constant_identifier_names,library_prefixes,unused_import,unused_shown_name

import 'dart:core' as $core
    show bool, Deprecated, double, int, List, Map, override, String;

import 'package:protobuf/protobuf.dart' as $pb;

import '../package/package.pb.dart' as $0;
import '../common/common.pb.dart' as $1;

import 'vulnerability.pbenum.dart';

export 'vulnerability.pbenum.dart';

class Vulnerability_Detail extends $pb.GeneratedMessage {
  static final $pb.BuilderInfo _i = $pb.BuilderInfo('Vulnerability.Detail',
      package: const $pb.PackageName('grafeas.v1beta1.vulnerability'))
    ..aOS(1, 'cpeUri')
    ..aOS(2, 'package')
    ..a<$0.Version>(3, 'minAffectedVersion', $pb.PbFieldType.OM,
        $0.Version.getDefault, $0.Version.create)
    ..a<$0.Version>(4, 'maxAffectedVersion', $pb.PbFieldType.OM,
        $0.Version.getDefault, $0.Version.create)
    ..aOS(5, 'severityName')
    ..aOS(6, 'description')
    ..a<VulnerabilityLocation>(7, 'fixedLocation', $pb.PbFieldType.OM,
        VulnerabilityLocation.getDefault, VulnerabilityLocation.create)
    ..aOS(8, 'packageType')
    ..aOB(9, 'isObsolete')
    ..hasRequiredFields = false;

  Vulnerability_Detail() : super();
  Vulnerability_Detail.fromBuffer($core.List<$core.int> i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromBuffer(i, r);
  Vulnerability_Detail.fromJson($core.String i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromJson(i, r);
  Vulnerability_Detail clone() =>
      Vulnerability_Detail()..mergeFromMessage(this);
  Vulnerability_Detail copyWith(void Function(Vulnerability_Detail) updates) =>
      super.copyWith((message) => updates(message as Vulnerability_Detail));
  $pb.BuilderInfo get info_ => _i;
  static Vulnerability_Detail create() => Vulnerability_Detail();
  Vulnerability_Detail createEmptyInstance() => create();
  static $pb.PbList<Vulnerability_Detail> createRepeated() =>
      $pb.PbList<Vulnerability_Detail>();
  static Vulnerability_Detail getDefault() =>
      _defaultInstance ??= create()..freeze();
  static Vulnerability_Detail _defaultInstance;

  $core.String get cpeUri => $_getS(0, '');
  set cpeUri($core.String v) {
    $_setString(0, v);
  }

  $core.bool hasCpeUri() => $_has(0);
  void clearCpeUri() => clearField(1);

  $core.String get package => $_getS(1, '');
  set package($core.String v) {
    $_setString(1, v);
  }

  $core.bool hasPackage() => $_has(1);
  void clearPackage() => clearField(2);

  $0.Version get minAffectedVersion => $_getN(2);
  set minAffectedVersion($0.Version v) {
    setField(3, v);
  }

  $core.bool hasMinAffectedVersion() => $_has(2);
  void clearMinAffectedVersion() => clearField(3);

  $0.Version get maxAffectedVersion => $_getN(3);
  set maxAffectedVersion($0.Version v) {
    setField(4, v);
  }

  $core.bool hasMaxAffectedVersion() => $_has(3);
  void clearMaxAffectedVersion() => clearField(4);

  $core.String get severityName => $_getS(4, '');
  set severityName($core.String v) {
    $_setString(4, v);
  }

  $core.bool hasSeverityName() => $_has(4);
  void clearSeverityName() => clearField(5);

  $core.String get description => $_getS(5, '');
  set description($core.String v) {
    $_setString(5, v);
  }

  $core.bool hasDescription() => $_has(5);
  void clearDescription() => clearField(6);

  VulnerabilityLocation get fixedLocation => $_getN(6);
  set fixedLocation(VulnerabilityLocation v) {
    setField(7, v);
  }

  $core.bool hasFixedLocation() => $_has(6);
  void clearFixedLocation() => clearField(7);

  $core.String get packageType => $_getS(7, '');
  set packageType($core.String v) {
    $_setString(7, v);
  }

  $core.bool hasPackageType() => $_has(7);
  void clearPackageType() => clearField(8);

  $core.bool get isObsolete => $_get(8, false);
  set isObsolete($core.bool v) {
    $_setBool(8, v);
  }

  $core.bool hasIsObsolete() => $_has(8);
  void clearIsObsolete() => clearField(9);
}

class Vulnerability extends $pb.GeneratedMessage {
  static final $pb.BuilderInfo _i = $pb.BuilderInfo('Vulnerability',
      package: const $pb.PackageName('grafeas.v1beta1.vulnerability'))
    ..a<$core.double>(1, 'cvssScore', $pb.PbFieldType.OF)
    ..e<Severity>(2, 'severity', $pb.PbFieldType.OE,
        Severity.SEVERITY_UNSPECIFIED, Severity.valueOf, Severity.values)
    ..pc<Vulnerability_Detail>(
        3, 'details', $pb.PbFieldType.PM, Vulnerability_Detail.create)
    ..hasRequiredFields = false;

  Vulnerability() : super();
  Vulnerability.fromBuffer($core.List<$core.int> i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromBuffer(i, r);
  Vulnerability.fromJson($core.String i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromJson(i, r);
  Vulnerability clone() => Vulnerability()..mergeFromMessage(this);
  Vulnerability copyWith(void Function(Vulnerability) updates) =>
      super.copyWith((message) => updates(message as Vulnerability));
  $pb.BuilderInfo get info_ => _i;
  static Vulnerability create() => Vulnerability();
  Vulnerability createEmptyInstance() => create();
  static $pb.PbList<Vulnerability> createRepeated() =>
      $pb.PbList<Vulnerability>();
  static Vulnerability getDefault() => _defaultInstance ??= create()..freeze();
  static Vulnerability _defaultInstance;

  $core.double get cvssScore => $_getN(0);
  set cvssScore($core.double v) {
    $_setFloat(0, v);
  }

  $core.bool hasCvssScore() => $_has(0);
  void clearCvssScore() => clearField(1);

  Severity get severity => $_getN(1);
  set severity(Severity v) {
    setField(2, v);
  }

  $core.bool hasSeverity() => $_has(1);
  void clearSeverity() => clearField(2);

  $core.List<Vulnerability_Detail> get details => $_getList(2);
}

class Details extends $pb.GeneratedMessage {
  static final $pb.BuilderInfo _i = $pb.BuilderInfo('Details',
      package: const $pb.PackageName('grafeas.v1beta1.vulnerability'))
    ..aOS(1, 'type')
    ..e<Severity>(2, 'severity', $pb.PbFieldType.OE,
        Severity.SEVERITY_UNSPECIFIED, Severity.valueOf, Severity.values)
    ..a<$core.double>(3, 'cvssScore', $pb.PbFieldType.OF)
    ..pc<PackageIssue>(
        4, 'packageIssue', $pb.PbFieldType.PM, PackageIssue.create)
    ..aOS(5, 'shortDescription')
    ..aOS(6, 'longDescription')
    ..pc<$1.RelatedUrl>(
        7, 'relatedUrls', $pb.PbFieldType.PM, $1.RelatedUrl.create)
    ..hasRequiredFields = false;

  Details() : super();
  Details.fromBuffer($core.List<$core.int> i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromBuffer(i, r);
  Details.fromJson($core.String i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromJson(i, r);
  Details clone() => Details()..mergeFromMessage(this);
  Details copyWith(void Function(Details) updates) =>
      super.copyWith((message) => updates(message as Details));
  $pb.BuilderInfo get info_ => _i;
  static Details create() => Details();
  Details createEmptyInstance() => create();
  static $pb.PbList<Details> createRepeated() => $pb.PbList<Details>();
  static Details getDefault() => _defaultInstance ??= create()..freeze();
  static Details _defaultInstance;

  $core.String get type => $_getS(0, '');
  set type($core.String v) {
    $_setString(0, v);
  }

  $core.bool hasType() => $_has(0);
  void clearType() => clearField(1);

  Severity get severity => $_getN(1);
  set severity(Severity v) {
    setField(2, v);
  }

  $core.bool hasSeverity() => $_has(1);
  void clearSeverity() => clearField(2);

  $core.double get cvssScore => $_getN(2);
  set cvssScore($core.double v) {
    $_setFloat(2, v);
  }

  $core.bool hasCvssScore() => $_has(2);
  void clearCvssScore() => clearField(3);

  $core.List<PackageIssue> get packageIssue => $_getList(3);

  $core.String get shortDescription => $_getS(4, '');
  set shortDescription($core.String v) {
    $_setString(4, v);
  }

  $core.bool hasShortDescription() => $_has(4);
  void clearShortDescription() => clearField(5);

  $core.String get longDescription => $_getS(5, '');
  set longDescription($core.String v) {
    $_setString(5, v);
  }

  $core.bool hasLongDescription() => $_has(5);
  void clearLongDescription() => clearField(6);

  $core.List<$1.RelatedUrl> get relatedUrls => $_getList(6);
}

class PackageIssue extends $pb.GeneratedMessage {
  static final $pb.BuilderInfo _i = $pb.BuilderInfo('PackageIssue',
      package: const $pb.PackageName('grafeas.v1beta1.vulnerability'))
    ..a<VulnerabilityLocation>(1, 'affectedLocation', $pb.PbFieldType.OM,
        VulnerabilityLocation.getDefault, VulnerabilityLocation.create)
    ..a<VulnerabilityLocation>(2, 'fixedLocation', $pb.PbFieldType.OM,
        VulnerabilityLocation.getDefault, VulnerabilityLocation.create)
    ..aOS(3, 'severityName')
    ..hasRequiredFields = false;

  PackageIssue() : super();
  PackageIssue.fromBuffer($core.List<$core.int> i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromBuffer(i, r);
  PackageIssue.fromJson($core.String i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromJson(i, r);
  PackageIssue clone() => PackageIssue()..mergeFromMessage(this);
  PackageIssue copyWith(void Function(PackageIssue) updates) =>
      super.copyWith((message) => updates(message as PackageIssue));
  $pb.BuilderInfo get info_ => _i;
  static PackageIssue create() => PackageIssue();
  PackageIssue createEmptyInstance() => create();
  static $pb.PbList<PackageIssue> createRepeated() =>
      $pb.PbList<PackageIssue>();
  static PackageIssue getDefault() => _defaultInstance ??= create()..freeze();
  static PackageIssue _defaultInstance;

  VulnerabilityLocation get affectedLocation => $_getN(0);
  set affectedLocation(VulnerabilityLocation v) {
    setField(1, v);
  }

  $core.bool hasAffectedLocation() => $_has(0);
  void clearAffectedLocation() => clearField(1);

  VulnerabilityLocation get fixedLocation => $_getN(1);
  set fixedLocation(VulnerabilityLocation v) {
    setField(2, v);
  }

  $core.bool hasFixedLocation() => $_has(1);
  void clearFixedLocation() => clearField(2);

  $core.String get severityName => $_getS(2, '');
  set severityName($core.String v) {
    $_setString(2, v);
  }

  $core.bool hasSeverityName() => $_has(2);
  void clearSeverityName() => clearField(3);
}

class VulnerabilityLocation extends $pb.GeneratedMessage {
  static final $pb.BuilderInfo _i = $pb.BuilderInfo('VulnerabilityLocation',
      package: const $pb.PackageName('grafeas.v1beta1.vulnerability'))
    ..aOS(1, 'cpeUri')
    ..aOS(2, 'package')
    ..a<$0.Version>(3, 'version', $pb.PbFieldType.OM, $0.Version.getDefault,
        $0.Version.create)
    ..hasRequiredFields = false;

  VulnerabilityLocation() : super();
  VulnerabilityLocation.fromBuffer($core.List<$core.int> i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromBuffer(i, r);
  VulnerabilityLocation.fromJson($core.String i,
      [$pb.ExtensionRegistry r = $pb.ExtensionRegistry.EMPTY])
      : super.fromJson(i, r);
  VulnerabilityLocation clone() =>
      VulnerabilityLocation()..mergeFromMessage(this);
  VulnerabilityLocation copyWith(
          void Function(VulnerabilityLocation) updates) =>
      super.copyWith((message) => updates(message as VulnerabilityLocation));
  $pb.BuilderInfo get info_ => _i;
  static VulnerabilityLocation create() => VulnerabilityLocation();
  VulnerabilityLocation createEmptyInstance() => create();
  static $pb.PbList<VulnerabilityLocation> createRepeated() =>
      $pb.PbList<VulnerabilityLocation>();
  static VulnerabilityLocation getDefault() =>
      _defaultInstance ??= create()..freeze();
  static VulnerabilityLocation _defaultInstance;

  $core.String get cpeUri => $_getS(0, '');
  set cpeUri($core.String v) {
    $_setString(0, v);
  }

  $core.bool hasCpeUri() => $_has(0);
  void clearCpeUri() => clearField(1);

  $core.String get package => $_getS(1, '');
  set package($core.String v) {
    $_setString(1, v);
  }

  $core.bool hasPackage() => $_has(1);
  void clearPackage() => clearField(2);

  $0.Version get version => $_getN(2);
  set version($0.Version v) {
    setField(3, v);
  }

  $core.bool hasVersion() => $_has(2);
  void clearVersion() => clearField(3);
}
